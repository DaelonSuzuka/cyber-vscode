{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cyber",
	"patterns": [
        {
			"include": "#comment"
		},
		{
			"include": "#tag_declaration"
		},
		{
			"include": "#base_expression"
		},
		{
			"include": "#builtin_func"
		},
		{
			"include": "#function_declaration"
		},
		{
			"include": "#object_declaration"
		},
		{
			"include": "#function_call"
		},
		{
			"include": "#control_flow"
		},
		{
			"include": "#numbers"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.language.cyber",
				"match": "\\b(true|false|none|as|var|is|coinit|coresume|coyield|capture|static|export)\\b"
			}]
		},
		"control_flow": {
			"patterns": [{
				"name": "keyword.control.cyber",
				"match": "\\b(if|then|else|try|catch|for|while|each|break|return|pass|import)\\b"
			}]
		},
		"base_expression": {
			"patterns": [
                {
                    "include": "#keywords"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#object_instance"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#tags"
                }
            ]
		},
        "types": {
            "match": "\\b(int|bool|float)\\b",
            "name": "entity.name.type.class.cyber"
        },
        "builtin_func": {
            "match": "\\b(print)\\b",
            "name": "support.function.builtin.cyber"
        },
        "function_call": {
            "match": "[.\\s]([a-zA-Z_]\\w*)\\s*[\\(]",
            "name": "entity.name.function.cyber"
        },
        "object_declaration": {
            "match": "(object)\\s*([a-zA-Z_]\\w*)\\s*(:)",
            "captures": {
                "1": {
                    "name": "keyword.language.cyber"
                },
                "2": {
                    "name": "entity.name.type.object.cyber"
                },
                "3": {
                    "name": "punctuation.section.object.begin.cyber"
                }
            }
        },
        "object_instance": {
            "name": "meta.object.cyber",
            "begin": "([a-zA-Z_]\\w*)\\s*{(?:(?=[^}]*}(?!\\s*:)))",
            "end": "}",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.type.object.cyber"
                },
                "2": {
                    "name": "entity.name.type.class.cyber"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.parameters.cyber"
                }
            },
            "patterns": [
                {
                    "include": "#object_parameters"
                }
            ]
        },
        "object_parameters": {
            "begin": "([a-zA-Z_]\\w*)",
            "end": "(,)|(?=\\))",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.function.language.cyber"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.parameters.cyber"
                }
            },
            "patterns": [
                {
                    "include": "#base_expression"
                }
            ]
        },
        "tag_declaration": {
            "match": "(tagtype)\\s*([a-zA-Z_]\\w*)\\s*(:)",
            "captures": {
                "1": {
                    "name": "keyword.language.cyber"
                },
                "2": {
                    "name": "entity.name.type.tag.cyber"
                },
                "3": {
                    "name": "punctuation.section.tag.begin.cyber"
                }
            }
        },
        "tags": {
            "match": "([a-zA-Z_]\\w*)(?:#)([a-zA-Z_]\\w*)",
            "captures": {
                "1": {
                    "name": "entity.name.type.class.cyber"
                },
                "2": {
                    "name": "string.quoted.double.cyber"
                }
            }
        },
        "function_declaration": {
            "name": "meta.function.cyber",
            "begin": "(?x) \\s*\n (func) \\s+\n ([a-zA-Z_]\\w*) \\s*\n (?=\\()",
            "end": "((:)|(?=['\"\\n]))",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.cyber"
                },
                "2": {
                    "name": "entity.name.function.cyber"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.function.begin.cyber"
                }
            },
            "patterns": [
                {
                    "include": "#parameters"
                },
                {
                    "comment": "return type",
                    "match": "\\s*([a-zA-Z_]\\w*)\\s*\\:",
                    "name": "entity.name.type.class.cyber"
                }
            ]
        },
        "parameters": {
            "name": "meta.function.parameters.cyber",
            "begin": "(\\()",
            "end": "(\\))",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.begin.cyber"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.end.cyber"
                }
            },
            "patterns": [
                {
                    "include": "#annotated_parameter"
                }
            ]
        },
        "annotated_parameter": {
            "begin": "([a-zA-Z_]\\w*) (?:\\b([a-zA-Z_]\\w*))?",
            "end": "(,)|(?=\\))",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.function.language.cyber"
                },
                "2": {
                    "name": "entity.name.type.class.cyber"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.parameters.cyber"
                }
            }
        },
        "operators": {
            "patterns": [
                {
                    "include": "#logic_op"
                },
                {
                    "include": "#compare_op"
                },
                {
                    "include": "#arithmetic_op"
                },
                {
                    "include": "#assignment_op"
                }
            ]
        },
        "logic_op": {
            "match": "\\b(and|or|not)\\b",
            "name": "keyword.operator.wordlike.cyber"
        },
        "compare_op": {
            "match": "<=|>=|==|<|>|!=",
            "name": "keyword.operator.comparison.cyber"
        },
        "arithmetic_op": {
            "match": "\\+=|-=|\\*=|/=|%=|&=|\\|=|\\*|/|%|\\+|-|<<|>>|&|\\||\\^|~",
            "name": "keyword.operator.arithmetic.cyber"
        },
        "assignment_op": {
            "match": "=",
            "name": "keyword.operator.assignment.cyber"
        },
		"strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.cyber",
                    "begin": "[\"]",
                    "end": "[\"]",
                    "patterns": [
                        {
                            "name": "constant.character.escape.cyber",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.cyber",
                    "begin": "[']",
                    "end": "[']",
                    "patterns": [
                        {
                            "name": "constant.character.escape.cyber",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
		},
        "numbers": {
            "patterns": [
                {
                    "match": "\\b(?i:0x\\h*)\\b",
                    "name": "constant.numeric.integer.hexadecimal.cyber"
                },
                {
                    "match": "\\b(?i:0o\\h*)\\b",
                    "name": "constant.numeric.octal.hexadecimal.cyber"
                },
                {
                    "match": "\\b(?i:0b\\h*)\\b",
                    "name": "constant.numeric.binary.hexadecimal.cyber"
                },
                {
                    "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))\\b",
                    "name": "constant.numeric.float.cyber"
                },
                {
                    "match": "\\b(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))\\b",
                    "name": "constant.numeric.float.cyber"
                },
                {
                    "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))\\b",
                    "name": "constant.numeric.float.cyber"
                },
                {
                    "match": "\\b\\d+\\b",
                    "name": "constant.numeric.integer.cyber"
                }
            ]
        },
		"comment": {
			"patterns": [
				{
					"begin": "--",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.cyber"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-dash.cyber"
				}
			]
		}
	},
	"scopeName": "source.cyber"
}